#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps
		

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)
echo "The current stack version: ${STACK}"
PROJECT_VERSION=$(grep -oPm1 "(?<=<TargetFramework>)[^<]+" ${BUILD_DIR}/*.csproj)
echo "The current project version: ${PROJECT_VERSION}"

#NETCORE_VERSION="5.0.2"
NETCORE_VERSION="5.0.2"
if [ $PROJECT_VERSION == "netcoreapp3.1" ]; then
	NETCORE_VERSION="5.0.2"
fi
echo "The install dotnet sdk version: ${NETCORE_VERSION}"

mkdir -p $BUILD_DIR/.profile.d
cp $BP_DIR/profile/* $BUILD_DIR/.profile.d/

### Load dependencies
source $BP_DIR/lib/helpers

export_env_dir $ENV_DIR
export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=${DOTNET_SKIP_FIRST_TIME_EXPERIENCE:-1}
export DOTNET_CLI_TELEMETRY_OPTOUT=${DOTNET_CLI_TELEMETRY_OPTOUT:-1}

echo "Installing the dependencies"
if [ $STACK == "cedar-14" ] || [ $STACK == "heroku-14" ]; then
   	if [ $PROJECT_VERSION == "netcoreapp2.1" ]; then
		apt_install libicu52
   	else
   		apt_install libunwind8 libicu52
   	fi
elif [ $STACK == "heroku-16" ]; then
	if [ $PROJECT_VERSION == "netcoreapp2.1" ]; then
		apt_install libicu55
   	else
   		apt_install libunwind8 libicu55
   	fi
elif [ $STACK == "heroku-20" ]; then
    apt_install libicu66 libssl1.1	
else
	if [ $PROJECT_VERSION == "netcoreapp2.1" ]; then
		apt_install libicu60 openssl1.0
   	else
   		apt_install libunwind8 libicu60 openssl1.0
   	fi
fi

echo "Installing dotnet"
install_dotnet $BUILD_DIR $CACHE_DIR $NETCORE_VERSION

export PATH="/app/dotnet:${PATH}"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}"

cd $BUILD_DIR
dotnet --info

if [ -z ${PROJECT_FILE:-} ]; then
	PROJECT_FILE=$(x=$(dirname $(find ${BUILD_DIR} -maxdepth 5 -iname Startup.cs | head -1)); while [[ "$x" =~ $BUILD_DIR ]] ; do find "$x" -maxdepth 1 -name *.csproj; x=`dirname "$x"`; done)
fi
if [ -z ${PROJECT_NAME:-} ]; then
	PROJECT_NAME=$(basename ${PROJECT_FILE%.*})
fi
echo "publish ${PROJECT_FILE}"
dotnet publish $PROJECT_FILE --output ${BUILD_DIR}/heroku_output --configuration Release --runtime linux-x64

#echo "Remove project files in production machine"
find -maxdepth 1 ! -name .profile.d ! -name .apt ! -name .heroku ! -name node_modules ! -name heroku_output  -exec rm -rv {} \;

cat << EOT >> ${BUILD_DIR}/Procfile
web: cd \$HOME/heroku_output && ASPNETCORE_URLS='http://+:\$PORT' dotnet "./${PROJECT_NAME}.dll"
EOT
